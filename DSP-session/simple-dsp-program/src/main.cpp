#include <math.h>
#include <stdio.h>
#include "arm_math.h"

/* 
  The polynomial SVM instance containing all parameters.
  Those parameters can be generated with the python library scikit-learn.
 */
arm_svm_polynomial_instance_f32 params;

/*
  Parameters generated by a training of the SVM classifier
  using scikit-learn and some random input data.
 */
#define NB_SUPPORT_VECTORS 10

/*
  Dimension of the vector space. A vector is your feature.
  It could, for instance, be the pixels of a picture or the FFT of a signal.
 */
#define VECTOR_DIMENSION 2

const float32_t dualCoefficients[NB_SUPPORT_VECTORS]={-0.09731564f, -0.01199752f, -0.04394973f,  0.04915431f,  0.01897764f,  0.01223402f,
  0.00553047f,  0.01410591f,  0.01910013f,  0.03416042f}; /* Dual coefficients */

const float32_t supportVectors[NB_SUPPORT_VECTORS*VECTOR_DIMENSION]={ 1.15831693f,  1.19977021f, -0.13034861f, -1.20227289f, -0.22726964f,  1.61974513f,
  1.31627649f,  2.56554077f, -2.10813198f,  2.02504738f, -2.87284051f, -0.12688101f,
  0.9996753f,  2.69592934f, 2.56433898f, -1.02058911f,  2.75850847f, -0.34663642f,
 -0.87451925f, -2.57644586f}; /* Support vectors */

/*
  Class A is identified with value 0.
  Class B is identified with value 1.
  
  This array is used by the SVM functions to do a conversion and ease the comparison
  with the Python code where different values could be used.
 */
const int32_t   classes[2]={0,1};


int main()
{
  /* Array of input data */
  float32_t in[VECTOR_DIMENSION];

  /* Result of the classifier */
  int32_t result;
  

  /*
    Initialization of the SVM instance parameters.
    Additional parameters (intercept, degree, coef0 and gamma) are also coming from Python.
   */
  arm_svm_polynomial_init_f32(&params,
    NB_SUPPORT_VECTORS,
    VECTOR_DIMENSION,
    -1.702502f,        /* Intercept */
    dualCoefficients,
    supportVectors,
    classes,
    3,                 /* degree */
    1.100000f,         /* Coef0 */
    0.500000f          /* Gamma */
  );


  /*
    Input data.
    It is corresponding to a point inside the first class.
   */
  in[0] = 0.4f;
  in[1] = 0.1f;

  arm_svm_polynomial_predict_f32(&params, in, &result);

  /* Result should be 0 : First class */
  printf("Result = %d\n", result);


  /*
    This input vector is corresponding to a point inside the second class.
   */
  in[0] = 3.0f;
  in[1] = 0.0f;

  arm_svm_polynomial_predict_f32(&params, in, &result);
  
  /* Result should be 1 : Second class */
  printf("Result = %d\n", result);

  return 0;

}



// #include <errno.h>
// #include <stdio.h>
// #include <unistd.h>
// #include <memory>
// #include <vector>



// int main(int argc, const char* argv[]) {

//   (void)argc;
//   (void)argv;

//    printf("Hello .... \n");

 
//   return 0;
// }
